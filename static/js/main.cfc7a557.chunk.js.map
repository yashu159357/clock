{"version":3,"sources":["clock/clo.bmp","clock/Clock.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Clock","date","Date","useState","hour","setHour","minute","setMinute","second","setSecond","useEffect","setTimeout","getHours","getMinutes","getSeconds","styles","className","src","require","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4JAAAA,EAAOC,QAAU,IAA0B,iC,4FCoF5BC,EAlFD,WACZ,IAAMC,EAAO,IAAIC,KADC,EAEMC,mBAAS,MAFf,mBAEXC,EAFW,KAELC,EAFK,OAGUF,mBAAS,MAHnB,mBAGXG,EAHW,KAGHC,EAHG,OAIUJ,mBAAS,MAJnB,mBAIXK,EAJW,KAIHC,EAJG,KAYlBC,qBAAU,WANRC,YAAW,WACTN,EAAQJ,EAAKW,YACbL,EAAUN,EAAKY,cACfJ,EAAUR,EAAKa,gBACd,QAKL,IAAIC,EAAM,idAkB6C,GAAPX,EAlBtC,yUA8B+C,EAATE,EA9BtC,gUA0C+C,EAATE,EA1CtC,qPAuDV,OACE,yBAAKQ,UAAU,SACb,+BAAQD,GACR,yBAAKE,IAAKC,EAAQ,IAAcC,IAAI,QAAQH,UAAU,mBACtD,yBAAKA,UAAU,SACf,yBAAKA,UAAU,WACf,yBAAKA,UAAU,WACf,qCAAOZ,EAAP,cAAiBE,EAAjB,eAA8BE,GAAU,EAAI,IAAM,IAAMA,MCvE/CY,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cfc7a557.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clo.27fa3619.bmp\";","import React, { useEffect, useState } from \"react\";\r\n\r\nconst Clock = () => {\r\n  const date = new Date();\r\n  const [hour, setHour] = useState(\"hh\");\r\n  const [minute, setMinute] = useState(\"mm\");\r\n  const [second, setSecond] = useState(\"ss\");\r\n  const getTime = () => {\r\n    setTimeout(() => {\r\n      setHour(date.getHours());\r\n      setMinute(date.getMinutes());\r\n      setSecond(date.getSeconds());\r\n    }, 1000);\r\n  };\r\n  useEffect(() => {\r\n    getTime();\r\n  });\r\n  let styles = `\r\n    .clock {\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%,-50%);\r\n        pointer-events: none;\r\n        user-select: none;\r\n    }\r\n    .clock_skeleton {\r\n        border: 6px solid grey;\r\n        border-radius: 50%;\r\n        box-shadow: 0 0 20px -5px black;\r\n    }\r\n    .hour {\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%,-100%) rotate(${hour * 30}deg);\r\n        transform-origin: bottom;\r\n        width: 5px;\r\n        height: 55px;\r\n        background: rgb(40,40,40);\r\n        z-index: 4;\r\n        transition: transform 0.3s;\r\n    }\r\n    .minute {\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%,-100%) rotate(${minute * 6}deg);\r\n        transform-origin: bottom;\r\n        width: 3px;\r\n        height: 80px;\r\n        background: grey;\r\n        z-index: 3;\r\n        transition: transform 0.3s;\r\n    }\r\n    .second {\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%,-100%) rotate(${second * 6}deg);\r\n        transform-origin: bottom;\r\n        width: 1.5px;\r\n        height: 110px;\r\n        background: red;\r\n        z-index: 2;\r\n    }\r\n    p {\r\n      position: absolute;\r\n      left: 50%;\r\n      transform: translate(-50%,0);\r\n    }\r\n`;\r\n  return (\r\n    <div className=\"clock\">\r\n      <style>{styles}</style>\r\n      <img src={require(\"./clo.bmp\")} alt=\"clock\" className=\"clock_skeleton\" />\r\n      <div className=\"hour\"></div>\r\n      <div className=\"minute\"></div>\r\n      <div className=\"second\"></div>\r\n      <p>{`${hour} : ${minute} : ${(second <= 9 ? \"0\" : \"\") + second}`}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Clock;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Clock from \"./clock/Clock\";\n\nfunction App() {\n  return <Clock />;\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}